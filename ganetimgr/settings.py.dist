# -*- coding: utf-8 -*- vim:fileencoding=utf-8:
# Copyright (C) 2010-2014 GRNET S.A.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
import os
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
PROJECT_DIR = os.path.join(BASE_DIR, 'ganetimgr')

DEBUG = True
TEMPLATE_DEBUG = DEBUG

# This setting is mandatory when DEBUG is set to False.
ALLOWED_HOSTS = [
    '.example.com',  # Allow domain and subdomains
    '.example.com.', # Also allow FQDN and subdomains
]


SITE_ID = 1

# Time zone & localization
TIME_ZONE = 'Europe/Athens'

_ = lambda s: s

LANGUAGES = (
    ('el', u'Ελληνικά'),
    ('en', _('English')),
)

LANGUAGE_CODE = 'en-us'

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

DATE_FORMAT = "d/m/Y H:i"
DATETIME_FORMAT = "d/m/Y H:i"


# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True
USE_L10N = True

MEDIA_ROOT = ''
MEDIA_URL = ''

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
)


MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'middleware.ForceLogout.ForceLogoutMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'middleware.UserMessages.UserMessageMiddleware',
)

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATICFILES_DIRS = (
)

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

ROOT_URLCONF = 'ganetimgr.urls'

TEMPLATE_DIRS = (
    os.path.join(BASE_DIR, 'templates'),
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django.contrib.messages',
    'django.contrib.admin',
    'django.contrib.staticfiles',
    'django_markdown',
    'accounts',
    'registration',
    'gnt',
    'apply',
    'notifications',
    'stats',
    'auditlog',
)

# Caching is a vital part of ganetimgr.
# If memcache is your preferred cache, then select:
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
        'TIMEOUT': 1,
    }
}

LOGIN_URL = '/user/login'
LOGIN_REDIRECT_URL = '/'

TEMPLATE_CONTEXT_PROCESSORS = (
    "django.contrib.auth.context_processors.auth",
    "django.core.context_processors.debug",
    "django.core.context_processors.i18n",
    "django.core.context_processors.media",
    "context.pending_notifications.notify",
    "context.session_remaining.seconds",
    "context.global_vars.settings_vars",
    "django.core.context_processors.request",
    "django.contrib.messages.context_processors.messages"
)

EMAIL_HOST = "127.0.0.1"
EMAIL_PORT = 25
USE_X_FORWARDED_HOST = True

# Auth stuff
# If you plan to deploy LDAP modify according to your needs
# For more info on django_auth_ldap settings, visit:
#   https://pythonhosted.org/django-auth-ldap/reference.html

#from ldap import SCOPE_SUBTREE
#from django_auth_ldap.config import LDAPSearch, NestedGroupOfNamesType

# The distinguished name to use when binding to the LDAP server
#AUTH_LDAP_BIND_DN = ""
# The password to use with AUTH_LDAP_BIND_DN
#AUTH_LDAP_BIND_PASSWORD = ""

# The URI of the LDAP server
#AUTH_LDAP_SERVER_URI = "ldap://ldap.domain.com"

#AUTH_LDAP_USER_SEARCH = LDAPSearch("ou=people,dc=domain",
#                                   SCOPE_SUBTREE,
#                                   "(uid=%(user)s)")

# Populate the Django user from the LDAP directory.
#AUTH_LDAP_USER_ATTR_MAP = {
#    "first_name": "givenName",
#    "last_name" : "sn",
#    "email"     : "mail",
#}

# Set up the basic group parameters.
#AUTH_LDAP_GROUP_SEARCH = LDAPSearch("ou=groups,dc=domain",
#                                    SCOPE_SUBTREE,
#                                    "(objectClass=groupOfNames)")
#AUTH_LDAP_GROUP_TYPE = NestedGroupOfNamesType()

## Only users in this group can log in.
#AUTH_LDAP_REQUIRE_GROUP = "cn=allowed,ou=groups,dc=domain"

# Mirror a user's LDAP group membership in the Django database
#AUTH_LDAP_MIRROR_GROUPS = True

# Enabling this option, means updating the fields of a User object with
# the latest values from the LDAP directory every time the user logs in.
#AUTH_LDAP_ALWAYS_UPDATE_USER = True

# Use LDAP group membership to calculate group permissions.
#AUTH_LDAP_FIND_GROUP_PERMS = True

# Cache group memberships for an hour to minimize LDAP traffic
#AUTH_LDAP_CACHE_GROUPS = True
#AUTH_LDAP_GROUP_CACHE_TIMEOUT = 3600

# Set the mapping from boolean User field names to distinguished names
# of LDAP groups.
#AUTH_LDAP_USER_FLAGS_BY_GROUP = {
#    "is_active"   : "cn=tech,ou=groups,dc=domain",
#    "is_staff"    : "cn=it,ou=groups,dc=domain",
#    "is_superuser": "cn=admin,ou=groups,dc=domain",
#}

# Call start_tls_s() to enable TLS encryption over the standard LDAP port
#AUTH_LDAP_START_TLS = True

# Keep ModelBackend around for per-user permissions and maybe a local superuser
AUTHENTICATION_BACKENDS = (
#    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
)

ACCOUNT_ACTIVATION_DAYS = 10

SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_COOKIE_AGE = 10800

IDLE_ACCOUNT_NOTIFICATION_DAYS = '180'

# Number of days that hash verification is active
INSTANCE_ACTION_ACTIVE_DAYS = 7

# This works for our GRNET NOC Jira installation. Default is False
HELPDESK_INTEGRATION_JAVASCRIPT_URL = ""
HELPDESK_INTEGRATION_JAVASCRIPT_PARAMS = {
    'customfield_11551': 'tier-1'
}

COLLECTD_URL = "http://stats.example.com"
# Graphs nodata image
NODATA_IMAGE = 'static/nodata.gif'

SERVER_MONITORING_URL = 'https://monitoring.example.com'

import _version
SW_VERSION = _version.VERSION

WHITELIST_IP_MAX_SUBNET_V4 = 26
WHITELIST_IP_MAX_SUBNET_V6 = 64

# RSS Feed for the login page
FEED_URL = "http://lists.noc.grnet.gr/sympa/rss/latest_arc/vima-users?count=20&for=30"

# Choose whether to support websockets console or not.
WEBSOCK_VNC_ENABLED = True
# This is meant to be used with twistednovncauthproxy
# twistd --pidfile=/tmp/proxy.pid -n vncap -c tcp:8888:interface=0.0.0.0
NOVNC_PROXY = "vnc.proxy.com:8888"
NOVNC_USE_TLS = True

BRANDING = {
    "SERVICE_PROVIDED_BY": {
        "NAME": "EXAMPLE",
        "URL": "//example.dot.com",
        "SOCIAL_NETWORKS": [
            {
                "URL": "https://facebook.com/",
                "FONT_AWSOME_NAME": "fa-facebook",
                "FONT_COLOR": "#3b5998"
            },
            {
                "URL": "https://twitter.com/",
                "FONT_AWSOME_NAME": "fa-twitter",
                "FONT_COLOR": "#00acee"
            }
        ]
    },
    "LOGO": "/static/ganetimgr/img/logo.png",
    "FAVICON": "/static/ganetimgr/img/favicon.ico",
    "MOTTO": "virtual private servers",
    "FOOTER_ICONS_IFRAME": True,
    # show the administrative contact
    # option when creating a new vm
    "SHOW_ADMINISTRATIVE_FORM": True,
    "SHOW_ORGANIZATION_FORM": True,
}

# Set the email subject prefix:
EMAIL_SUBJECT_PREFIX = "[GANETIMGR SERVICE] "
SERVER_EMAIL = "no-reply@example.com"
DEFAULT_FROM_EMAIL = "no-reply@example.com"

# Flatpages manipulation. Show or hide flatpages links in page.
FLATPAGES = {
    "INFO": True,
    "TOS": True,
    "FAQ": True,
}

RAPI_CONNECT_TIMEOUT = 8
RAPI_RESPONSE_TIMEOUT = 15

MARKDOWN_EDITOR_SKIN = 'simple'

# List of operating system images you provide...
OPERATING_SYSTEMS = {
    "none": {
        "description": "No operating system",
        "provider": "noop",
        "osparams": {},
        "ssh_key_param": "",
    },
}


# the urls of the available os images
OPERATING_SYSTEMS_URLS = ['http://example.com/images']

# the provider and ssh key param
# We assume that they have the same configuration
OPERATING_SYSTEMS_PROVIDER = 'image+default'
OPERATING_SYSTEMS_SSH_KEY_PARAM = 'img_ssh_key_url'


# Get a recaptcha key
RECAPTCHA_PUBLIC_KEY = ''
RECAPTCHA_PRIVATE_KEY = ''
RECAPTCHA_USE_SSL = True

# Select your ganetimgr prefix. This is applied in the tags
# of the instances. You could leave it as it is or set your own,
# eg.  GANETI_TAG_PREFIX = "vmservice"
GANETI_TAG_PREFIX = "ganetimgr"


# Instance specific django config.
ADMINS = (
    ('John Doe', 'john@example.com'),
)
MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.',  # 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': '',                # Or path to database file if using sqlite3.
        'USER': '',             # Not used with sqlite3.
        'PASSWORD': '',          # Not used with sqlite3.
        'HOST': '',             # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',             # Set to empty string for default. Not used with sqlite3.
        'OPTIONS': {'init_command': 'SET storage_engine=MYISAM;'}
    }
}

# Make this unique, and don't share it with anybody.
SECRET_KEY = <CHANGE ME>

# Explicitly specify the test runner used
TEST_RUNNER = 'django.test.runner.DiscoverRunner'
